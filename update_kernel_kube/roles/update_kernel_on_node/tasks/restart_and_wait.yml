---
- name: 'Disable kubelet and containerd'
  ansible.builtin.service:
    name: {{ item }}
    state: stopped
    enabled: False
  with_items: 
    - kubelet
    - containerd

- name: 'Restart node {{ inventory_hostname }}'
  ansible.builtin.reboot:

- name: 'Destroy datasets for containerd'
  ansible.builtin.command: "{{ item }}"
  loop:
    - "{{ zfs }} destroy -r {{ snapshotter_dataset }}"
    - "{{ zfs }} destroy -r {{ containerd_dataset }}"
    - "rm -rf {{ containerd_mountpoint }}"

- name: 'Recreate datasets for containerd'
  ansible.builtin.command: "{{ item }}"
  loop:
    - "{{ zfs }} create {{ containerd_dataset }} -o mountpoint={{ containerd_mountpoint }}"
    - "{{ zfs }} create -o mountpoint={{ snapshotter_mountpoint }} {{ snapshotter_dataset }}"

- name: 'Start kubelet and containerd'
  ansible.builtin.service:
    name: {{ item }}
    state: stopped
    enabled: True
  with_items: 
    - kubelet
    - containerd

- name: 'Wait for node to be active ready again'
  ansible.builtin.command: >
    {{ kubectl }} get node {{ inventory_hostname }}
    -o jsonpath='{ range .status.conditions[?(@.type == "Ready")].status}{@}{ end }'
  retries: 10
  delay: 30
  register: kubectl_node_ready
  delegate_to: "{{ groups['kube_masters'][0] }}"
  until: kubectl_node_ready.stdout == 'True'

- name: 'Uncordon node {{ inventory_hostname }}'
  ansible.builtin.command: >
    {{ kubectl }} uncordon {{ inventory_hostname }}
  delegate_to: "{{ groups['kube_masters'][0] }}"

- name: 'Check again if kubernetes node is scheduable'
  ansible.builtin.command: >
    {{ kubectl }} get node {{ inventory_hostname }} -o jsonpath='{ .spec.unschedulable }'
  register: kubectl_node_scheduable
  delegate_to: "{{ groups['kube_masters'][0] }}"
  failed_when: false
  changed_when: false

- name: 'Is node {{ inventory_hostname }} scheduable?'
  ansible.builtin.debug:
    msg: Node {{ inventory_hostname }} is scheduable
  when: not kubectl_node_scheduable.stdout_lines
